--- Unit tests for [[Global Lua Modules/Loxygen]].
--  @see [[Module talk:Loxygen/testcases]]

local unindent = require('../src/libraries/unindent')

return {
    main = {
        options = {
            mode = 'invocation',
            preprocess = true,
            template = true
        },
        tests = {
            -- content check
            {
                'DEV/NULL',
                'Lua source code not found in Module:DEV/NULL',
                { err = true }
            },
            -- markup check
            {
                'Codedoc',
                'documentation markup for Loxygen not found in Module:Codedoc',
                { err = true }
            },
            -- basic functionality
            {
                'Entrypoint',
                unindent [=[
                __NOEDITSECTION__{{Infobox Lua
                | Title = Entrypoint
                | Type = meta
                | Status = stable
                | Author = [[User:8nml|8nml]]
                | Description = Templating wrapper for Scribunto packages.
                | Code = Entrypoint
                | Languages = mw
                }}
                <b>Entrypoint</b> templating wrapper for Scribunto packages. The module generates an entrypoint function that can execute Scribunto package calls in the template context. This allows a package to support both direct and template invocations. 
                
                == Documentation ==
                === Package function ===
                ;<code id="entrypoint">entrypoint(package)</code>&#32;([[#pdf-function|function]])
                :Entrypoint templating wrapper for Scribunto packages.
                :<b>Parameter</b>:&#32;<code>package</code> Scribunto package.&#32;([[#pdf-table|table]])
                :<b>Errors</b>:&#32;
                ::'you must specify a function to call'&#32;([[#pdf-string|string]];&#32;line 85)
                ::'the function you specified did not exist'&#32;([[#pdf-string|string]];&#32;line 91)
                ::'$2 is not a function'&#32;([[#pdf-string|string]];&#32;line 95;&#32;optional)
                :<b>Returns</b>:&#32;Template entrypoint - <code>[[#main|main]]</code>.&#32;([[#pdf-function|function]])
                === Other items ===
                ;<code id="main">main(frame)</code>&#32;([[#pdf-function|function]])
                :Template entrypoint function generated by this module.
                :<b>Parameter</b>:&#32;<code>frame</code> Scribunto frame in module context.&#32;([[Lua reference manual/Scribunto libraries#Frame object|Frame]])
                :<b>Returns</b>:&#32;Module output in template context.&#32;([[#pdf-string|string]])
                
                == Notes ==
                * Parent frames are not available in Entrypoint's <code><nowiki>frame</nowiki></code>. This is because recursive (grandparent) frame access is impossible in legacy Scribunto due to [[mw:Manual:Parser#Empty-argument expansion cache|empty-argument expansion cache]] limitations.
                * As Entrypoint enables template access rather than a new extension hook, it does not work with named numeric parameters such as <code><nowiki>1=</nowiki></code> or <code><nowiki>2=</nowiki></code>. This may result in unexpected behaviour such as Entrypoint and module errors.
                <nowiki />
                ]=]
            },
            -- self-documentation and markup
            {
                'Loxygen',
                unindent [=[
                __NOEDITSECTION__{{Infobox Lua
                | Title = Loxygen
                | Image file = Loxygen.svg
                | Type = invocable
                | Status = stable
                | Description = Automatic documentation generator for Scribunto modules.
                | Author = [[User:8nml|8nml]]
                | Code = Loxygen
                | Dependencies =
                * [[Module:I18n]]
                * [[Module:Lexer]]
                * [[Module:T]]
                * [[Module:Unindent]]
                * [[Module:Yesno]]
                | Using code by = [[github:stevedonovan|@stevedonovan]] ([[github:stevedonovan/LDoc|Github]])
                | Languages = auto
                }}
                <b>Loxygen</b> is an automatic documentation generator for Scribunto modules. The module is based on LuaDoc and LDoc. It produces documentation in the form of MediaWiki markup, using <code><nowiki>@tag</nowiki></code>-prefixed comments embedded in the source code of a Scribunto module. The taglet parser & doclet renderer Loxygen uses are also publicly exposed to other modules.
                
                Loxygen code items are introduced by a block comment (<code><nowiki>--[[]]--</nowiki></code>), an inline comment with three hyphens (<code><nowiki>---</nowiki></code>), or an inline <code><nowiki>@tag</nowiki></code> comment. The module can use static code analysis to infer variable names, item privacy (<code><nowiki>local</nowiki></code> keyword), tables (<code><nowiki>{}</nowiki></code> constructor) and functions (<code><nowiki>function</nowiki></code> keyword). MediaWiki and Markdown formatting is supported.
                
                Items are usually rendered in the order they are defined, if they are public items, or emulated classes extending the Lua primitives. There are many customisation options available to change Loxygen behaviour. 
                
                == Documentation ==
                === Package items ===
                ;<code id="loxygen.main">loxygen.main(f)</code>&#32;([[#pdf-function|function]])
                :Template entrypoint for [[Template:Loxygen]].
                :<b>Parameter</b>:&#32;<code>f</code> Scribunto frame object.&#32;([[#pdf-table|table]])
                :<b>Returns</b>:&#32;Module documentation output.&#32;([[#pdf-string|string]])
                ;<code id="loxygen.build">loxygen.build(<span style="opacity: 0.65;">modname</span><span style="opacity: 0.65;">, options</span>)</code>&#32;([[#pdf-function|function]])
                :Scribunto documentation generator entrypoint.
                :<b>Parameters</b>:&#32;
                ::<code>modname</code> Module page name (without namespace). Default: second-level subpage.&#32;([[#pdf-string|string]];&#32;optional)
                ::<code>options</code> Configuration options.&#32;([[#pdf-table|table]];&#32;optional)
                :::<code>options.all</code> Include local items in documentation.&#32;([[#pdf-boolean|boolean]];&#32;optional)
                :::<code>options.boilerplate</code> Removal of boilerplate (license block comments).&#32;([[#pdf-boolean|boolean]];&#32;optional)
                :::<code>options.caption</code> Infobox image caption.&#32;([[#pdf-string|string]];&#32;optional)
                :::<code>options.code</code> Only document Loxygen code items - exclude article infobox and lede from rendered documentation. Permits article to be edited in VisualEditor.&#32;([[#pdf-boolean|boolean]];&#32;optional)
                :::<code>options.colon</code> Format tags with a <code><nowiki>:</nowiki></code> suffix and without the <code><nowiki>@</nowiki></code> prefix. This bypasses the "doctag soup" some authors complain of.&#32;([[#pdf-boolean|boolean]];&#32;optional)
                :::<code>options.image</code> Infobox image.&#32;([[#pdf-string|string]];&#32;optional)
                :::<code>options.noluaref</code> Don't link to the [[Lua reference manual]] for types.&#32;([[#pdf-boolean|boolean]];&#32;optional)
                :::<code>options.plain</code> Disable Markdown formatting in documentation.&#32;([[#pdf-boolean|boolean]];&#32;optional)
                :::<code>options.preface</code> Preface text to insert between lede & item documentation, used to provide usage and code examples.&#32;([[#pdf-string|string]];&#32;optional)
                :::<code>options.simple</code> Limit documentation to descriptions only. Removes documentation of subitem tags such as <code><nowiki>@param</nowiki></code> and <code><nowiki>@field</nowiki></code> ([[#Item subtags|see list]]).&#32;([[#pdf-boolean|boolean]];&#32;optional)
                :::<code>options.sort</code> Sort documentation items in alphabetical order.&#32;([[#pdf-boolean|boolean]];&#32;optional)
                :::<code>options.strip</code> Remove table index in documentation.&#32;([[#pdf-boolean|boolean]];&#32;optional)
                :::<code>options.ulist</code> Indent subitems as <code><nowiki><ul></nowiki></code> lists (LDoc/JSDoc behaviour).&#32;([[#pdf-boolean|boolean]];&#32;optional)
                ;<code id="loxygen.taglet">loxygen.taglet(<span style="opacity: 0.65;">modname</span><span style="opacity: 0.65;">, options</span>)</code>&#32;([[#pdf-function|function]])
                :Loxygen taglet parser for Scribunto modules.
                :<b>Parameters</b>:&#32;
                ::<code>modname</code> Module page name (without namespace).&#32;([[#pdf-string|string]];&#32;optional)
                ::<code>options</code> Configuration options.&#32;([[#pdf-table|table]];&#32;optional)
                :<b>Errors</b>:&#32;
                ::'Lua source code not found in $1'&#32;([[#pdf-string|string]];&#32;line 938)
                ::'documentation markup for Loxygen not found in $1'&#32;([[#pdf-string|string]];&#32;line 944)
                :<b>Returns</b>:&#32;Module documentation data.&#32;([[#pdf-table|table]])
                ;<code id="loxygen.doclet">loxygen.doclet(data<span style="opacity: 0.65;">, options</span>)</code>&#32;([[#pdf-function|function]])
                :Doclet renderer for Loxygen taglet data.
                :<b>Parameters</b>:&#32;
                ::<code>data</code> Taglet documentation data.&#32;([[#pdf-table|table]])
                ::<code>options</code> Configuration options.&#32;([[#pdf-table|table]];&#32;optional)
                :<b>Returns</b>:&#32;Wikitext documentation output.&#32;([[#pdf-string|string]])
                ;<code id="loxygen.tags">loxygen.tags</code>&#32;([[#pdf-table|table]])
                :Token dictionary for Loxygen tags. Maps Loxygen tag names to tag tokens.
                :* Multi-line tags use the <code><nowiki>'M'</nowiki></code> token.
                :* Multi-line preformatted tags use the <code><nowiki>'ML'</nowiki></code> token.
                :* Identifier tags use the <code><nowiki>'ID'</nowiki></code> token.
                :* Single-line tags use the <code><nowiki>'S'</nowiki></code> token.
                :* Flags use the <code><nowiki>'N'</nowiki></code> token.
                :* Type tags use the <code><nowiki>'T'</nowiki></code> token.
                <nowiki />
                ]=]
            },
            -- factory and pragma support
            {
                'Loxygen/testcases/Factory|code = 1|ulist = 1',
                unindent [=[
                === Package items ===
                ;<code id="i18nf.loadMessages">i18nf.loadMessages(name, options)</code>&#32;([[#pdf-function|function]])
                :Loads messages from JSON files in MediaWiki namespace. The messages are wrapped in a custom interface:
                :* This function parses and caches messages in the module as a Lua data table.
                :* These can be accessed using the <code>[[#I18n:msg|msg]]</code> method of the returned object.
                :<b>Parameters</b>:&#32;
                :*<code>name</code> Name of <code><nowiki>i18n.json</nowiki></code> root page.&#32;([[#pdf-string|string]])
                :*<code>options</code> Configuration options.&#32;([[#pdf-table|table]])
                :**<code>options.inline</code> Whether the JSON file uses inline comments instead of multiline comments.&#32;([[#pdf-boolean|boolean]];&#32;optional)
                :<b>Returns</b>:&#32;Instance of <code>[[#I18n|I18n]]</code> object.&#32;([[#I18n|I18n]])
                ;<code id="i18nf._getMsg">i18nf._getMsg(name, key, i18n)</code>&#32;([[#pdf-function|function]])
                :Fetch a message from the cache of parsed i18n data.
                :<b>Parameters</b>:&#32;
                :*<code>name</code> Message source name.&#32;([[#pdf-string|string]])
                :*<code>key</code> Message key.&#32;([[#pdf-string|string]])
                :*<code>i18n</code> Instance of <code>[[#I18n|I18n]]</code> object.&#32;([[#I18n|I18n]])
                === <code>Message</code> ===
                Message object, providing getter methods for messages.
                ;<code id="Message:parse">Message:parse()</code>&#32;([[#pdf-function|function]])
                :Parse wikitext links in the message and return the result.
                :<b>Returns</b>:&#32;Message string with MediaWiki and Markdown rendered.&#32;([[#pdf-string|string]])
                ;<code id="Message:markdown">Message:markdown()</code>&#32;([[#pdf-function|function]])
                :Parse markdown links in the message and return the result.
                :<b>Returns</b>:&#32;Message string with Markdown rendered.&#32;([[#pdf-string|string]])
                ;<code id="Message:escape">Message:escape()</code>&#32;([[#pdf-function|function]])
                :Escape the message wikitext and return the result.
                :<b>Returns</b>:&#32;Escaped message string.&#32;([[#pdf-string|string]])
                ;<code id="Message:plain">Message:plain()</code>&#32;([[#pdf-function|function]])
                :Return the message with no processing.
                :<b>Returns</b>:&#32;Plain message string.&#32;([[#pdf-string|string]])
                === <code>I18n</code> ===
                I18n object, providing message getter and language setters.
                ;<code id="I18n:msg">I18n:msg(...)</code>&#32;([[#pdf-function|function]]&nbsp;•&#32;factory&nbsp;•&#32;constructor)
                :Factory returning <code>[[#Message|Message]]</code> instance.
                :<b>Parameter</b>:&#32;<code>[[#pdf-varargs|...]]</code> Message key, followed by optional arguments to substitute into.&#32;([[#pdf-string|string]])
                :<b>Returns</b>:&#32;Instance of <code>[[#Message|Message]]</code>.&#32;([[#Message|Message]])
                ;<code id="I18n:useLang">I18n:useLang(code)</code>&#32;([[#pdf-function|function]])
                :I18n language setter to specificed language.
                :<b>Parameter</b>:&#32;<code>code</code> Language code to use.&#32;([[#pdf-string|string]])
                :<b>Returns</b>:&#32;Object instance of I18n (chainable).&#32;([[#I18n|I18n]])
                ;<code id="I18n:inLang">I18n:inLang(code)</code>&#32;([[#pdf-function|function]])
                :Temporary datastore language setter to a specificed language. Only affects the next <code>[[#I18n:msg|I18n:msg]]</code> call.
                :<b>Parameter</b>:&#32;<code>code</code> Language code to use.&#32;([[#pdf-string|string]])
                :<b>Returns</b>:&#32;Object instance of I18n (chainable).&#32;([[#I18n|I18n]])
                ;<code id="I18n:useContentLang">I18n:useContentLang()</code>&#32;([[#pdf-function|function]])
                :I18n language setter to <code><nowiki>wgContentLanguage</nowiki></code>.
                :<b>Returns</b>:&#32;Object instance of I18n (chainable).&#32;([[#I18n|I18n]])
                ;<code id="I18n:inContentLang">I18n:inContentLang()</code>&#32;([[#pdf-function|function]])
                :Temporary language setter to <code><nowiki>wgContentLanguage</nowiki></code>. Only affects the next <code>[[#I18n:msg|I18n:msg]]</code> call.
                :<b>Returns</b>:&#32;Object instance of I18n (chainable).&#32;([[#I18n|I18n]])
                ;<code id="I18n:useUserLang">I18n:useUserLang()</code>&#32;([[#pdf-function|function]])
                :I18n language setter to <code><nowiki>wgUserLanguage</nowiki></code>.
                :<b>Returns</b>:&#32;Object instance of I18n (chainable).&#32;([[#I18n|I18n]])
                :<b>Note</b>:&#32;Scribunto only registers <code><nowiki>wgUserLanguage</nowiki></code> when an invocation is at the top of the call stack.
                ;<code id="I18n:inUserLang">I18n:inUserLang()</code>&#32;([[#pdf-function|function]])
                :Temporary language setter to <code><nowiki>wgUserLanguage</nowiki></code>. The message language reverts to the default language in the next <code>[[#I18n:msg|I18n:msg]]</code> call.
                :<b>Returns</b>:&#32;Object instance of I18n (chainable).&#32;([[#I18n|I18n]])
                
                === See also ===
                * [[I18n-js|Original JS library]]
                * [[wikipedia:Factory method pattern|"Factory method pattern" on Wikipedia]]
                <nowiki />
                ]=]
            },
            -- `options.code`
            {
                'Entrypoint|code = 1',
                unindent [=[
                === Package function ===
                ;<code id="entrypoint">entrypoint(package)</code>&#32;([[#pdf-function|function]])
                :Entrypoint templating wrapper for Scribunto packages. The module generates an entrypoint function that can execute Scribunto package calls in the template context. This allows a package to support both direct and template invocations. 
                :<b>Parameter</b>:&#32;<code>package</code> Scribunto package.&#32;([[#pdf-table|table]])
                :<b>Errors</b>:&#32;
                ::'you must specify a function to call'&#32;([[#pdf-string|string]];&#32;line 85)
                ::'the function you specified did not exist'&#32;([[#pdf-string|string]];&#32;line 91)
                ::'$2 is not a function'&#32;([[#pdf-string|string]];&#32;line 95;&#32;optional)
                :<b>Returns</b>:&#32;Template entrypoint - <code>[[#main|main]]</code>.&#32;([[#pdf-function|function]])
                === Other items ===
                ;<code id="main">main(frame)</code>&#32;([[#pdf-function|function]])
                :Template entrypoint function generated by this module.
                :<b>Parameter</b>:&#32;<code>frame</code> Scribunto frame in module context.&#32;([[Lua reference manual/Scribunto libraries#Frame object|Frame]])
                :<b>Returns</b>:&#32;Module output in template context.&#32;([[#pdf-string|string]])
                
                === Notes ===
                * Parent frames are not available in Entrypoint's <code><nowiki>frame</nowiki></code>. This is because recursive (grandparent) frame access is impossible in legacy Scribunto due to [[mw:Manual:Parser#Empty-argument expansion cache|empty-argument expansion cache]] limitations.
                * As Entrypoint enables template access rather than a new extension hook, it does not work with named numeric parameters such as <code><nowiki>1=</nowiki></code> or <code><nowiki>2=</nowiki></code>. This may result in unexpected behaviour such as Entrypoint and module errors.
                <nowiki />
                ]=]
            },
            -- `options.all`
            {
                'Entrypoint|code = 1|all = 1',
                unindent [=[
                === Package function ===
                ;<code id="entrypoint">entrypoint(package)</code>&#32;([[#pdf-function|function]])
                :Entrypoint templating wrapper for Scribunto packages. The module generates an entrypoint function that can execute Scribunto package calls in the template context. This allows a package to support both direct and template invocations. 
                :<b>Parameter</b>:&#32;<code>package</code> Scribunto package.&#32;([[#pdf-table|table]])
                :<b>Errors</b>:&#32;
                ::'you must specify a function to call'&#32;([[#pdf-string|string]];&#32;line 85)
                ::'the function you specified did not exist'&#32;([[#pdf-string|string]];&#32;line 91)
                ::'$2 is not a function'&#32;([[#pdf-string|string]];&#32;line 95;&#32;optional)
                :<b>Returns</b>:&#32;Template entrypoint - <code>[[#main|main]]</code>.&#32;([[#pdf-function|function]])
                === Other items ===
                ;<code id="main">main(frame)</code>&#32;([[#pdf-function|function]])
                :Template entrypoint function generated by this module.
                :<b>Parameter</b>:&#32;<code>frame</code> Scribunto frame in module context.&#32;([[Lua reference manual/Scribunto libraries#Frame object|Frame]])
                :<b>Returns</b>:&#32;Module output in template context.&#32;([[#pdf-string|string]])
                === Private items===
                ;<code id="inext">inext(t, i)</code>&#32;([[#pdf-function|function]]&nbsp;•&#32;local)
                :Stateless, sequential Lua iterator.
                :<b>Parameters</b>:&#32;
                ::<code>t</code> Invariant state to loop over.&#32;([[#pdf-table|table]])
                ::<code>i</code> Control variable (current index).&#32;([[#pdf-number|number]])
                :<b>Returns</b>:&#32;
                ::Next index.&#32;([[#pdf-number|number]];&#32;optional)
                ::Next value.&#32;([[#pdf-number|number]]|[[#pdf-string|string]]|[[#pdf-table|table]]|[[#pdf-boolean|boolean]];&#32;optional)
                :<b>See also</b>:&#32;[[github:lua/lua/blob/v5.1.1/lbaselib.c#L247]]
                ;<code id="func_check">func_check</code>&#32;(variable;&#32;[[#pdf-boolean|boolean]]&nbsp;•&#32;local)
                :Check for MediaWiki version 1. 25. The concurrent Scribunto release adds a type check for package functions.
                :<b>See also</b>:&#32;[[mw:MediaWiki 1.24/wmf7#Scribunto]]
                ;<code id="msg">msg(key<span style="opacity: 0.65;">, fn_name</span>)</code>&#32;([[#pdf-function|function]]&nbsp;•&#32;local)
                :MediaWiki error message getter. Mimics Scribunto error formatting for script errors.
                :<b>Parameters</b>:&#32;
                ::<code>key</code> MediaWiki i18n message key.&#32;([[#pdf-string|string]])
                ::<code>fn_name</code> Name of package function.&#32;([[#pdf-string|string]];&#32;optional)
                :<b>Returns</b>:&#32;Formatted lowercase message.&#32;([[#pdf-string|string]])

                === Notes ===
                * Parent frames are not available in Entrypoint's <code><nowiki>frame</nowiki></code>. This is because recursive (grandparent) frame access is impossible in legacy Scribunto due to [[mw:Manual:Parser#Empty-argument expansion cache|empty-argument expansion cache]] limitations.
                * As Entrypoint enables template access rather than a new extension hook, it does not work with named numeric parameters such as <code><nowiki>1=</nowiki></code> or <code><nowiki>2=</nowiki></code>. This may result in unexpected behaviour such as Entrypoint and module errors.
                <nowiki />
                ]=]
            },
            -- `options.boilerplate`
            {
                'Unindent|boilerplate = 1',
                unindent [=[
                __NOEDITSECTION__{{Infobox Lua
                | Title = Unindent
                | Type = meta
                | Status = stable
                | Description = Resets the indentation level of mulitline strings.
                | Author = [[User:8nml|8nml]]
                | Code = Unindent
                | Using code by = [[github:kikito|@kikito]] ([[github:kikito/inspect.lua/blob/master/spec/unindent.lua|Github]])
                }}
                <b>Unindent</b> resets the indentation level of mulitline strings. It is useful for multiline strings inside functions and large tables. This module serves as a utility function for string parsing, [[Global Lua Modules/Testharness|Testharness]] test suites, [[Global Lua Modules/I18n|I18n]] datastores.
                
                Lua supports multiline strings in the format <code><nowiki>[[\n...\n]]</nowiki></code>. In general, Lua does not outdent indented multiline strings out of the box. Though Lua supports variable indentation in multiline strings, custom logic is necessary to reset the string's indentation. This module adopts a flexible approach based on string scanning.
                
                Unlike Penlight's <code><nowiki>pl.text.dedent</nowiki></code> behaviour where every line has the indentation of the first line removed, the line prefixed with the least non-tab whitespace is reset to zero indentation. Thus, the opening line of the string may retain some indentation <i>if</i> there are lines of less indentation terminating the string. 
                
                == Documentation ==
                === Package function ===
                ;<code id="unindent">unindent(str)</code>&#32;([[#pdf-function|function]])
                :Unindent resets the indentation level of mulitline strings.
                :<b>Parameter</b>:&#32;<code>str</code> Multiline string indented consistently.&#32;([[#pdf-string|string]])
                :<b>Returns</b>:&#32;Unindented string.&#32;([[#pdf-string|string]])
                <nowiki />
                ]=]
            },
            -- `options.colon` and LDoc compatibility
            {
                'Loxygen/testcases/LDoc|code = 1|colon = 1|ulist = 1',
                unindent [=[
                === Package items ===
                ;<code id="multiple.mul1">multiple.mul1()</code>&#32;([[#pdf-function|function]])
                :Function with return groups.
                :<b>Returns</b>:&#32;Result.&#32;([[#pdf-string|string]])
                ;<code id="multiple.mul2">multiple.mul2()</code>&#32;([[#pdf-function|function]])
                :Function with return and error tag.
                :<b>Error</b>:&#32;'message'
                :<b>Returns</b>:&#32;Result.
                ;<code id="multiple.mul3">multiple.mul3()</code>&#32;([[#pdf-function|function]])
                :Function with multiple error tags.
                :<b>Errors</b>:&#32;
                :*'not found'
                :** When <code><nowiki>multiple.lua</nowiki></code> is missing in the same directory.
                :*'bad format'
                :** When <code><nowiki>multiple.lua</nowiki></code> contains invalid UTF-8 sequences.
                :<b>Returns</b>:&#32;Result.
                ;<code id="multiple.mul4">multiple.mul4()</code>&#32;([[#pdf-function|function]])
                :Function with inline return and errors.
                :<b>Errors</b>:&#32;
                :*'not a string'&#32;(line 31)
                :*'zero-length string'&#32;(line 34)
                :<b>Returns</b>:&#32;Name converted to uppercase.&#32;([[#pdf-string|string]])
                ;<code id="multiple.mul5">multiple.mul5()</code>&#32;([[#pdf-function|function]])
                :Function that raises an error.
                :<b>Error</b>:&#32;'file not found'
                :<b>Returns</b>:&#32;Contents of file in UTF-8 charset.&#32;([[#pdf-string|string]])
                ;<code id="multiple.mul6">multiple.mul6()</code>&#32;([[#pdf-function|function]])
                :First useless function. Optional type specifiers are allowed in this format. Note how these types are rendered!
                :<b>Returns</b>:&#32;&#32;([[#pdf-table|table]]|[[#pdf-string|string]]|[[#pdf-nil|nil]])
                ;<code id="multiple.mul7">multiple.mul7(name)</code>&#32;([[#pdf-function|function]])
                :A function with typed args. Note the the standard tparam aliases, and how the 'opt' and 'optchain' modifiers may also be used. If the Lua function has varargs, then you may document an indefinite number of extra arguments!
                :<b>Parameter</b>:&#32;<code>name</code> Person's name.&#32;([[#pdf-string|string]]|[[#Person|Person]]|[[#pdf-nil|nil]])
                :<b>Returns</b>:&#32;Birthday month in calendar (usually Gregorian).&#32;([[#pdf-string|string]])
                ;<code id="multiple.mul8">multiple.mul8(one<span style="opacity: 0.65;">, two</span>, three<span style="opacity: 0.65;">, ...</span>)</code>&#32;([[#pdf-function|function]])
                :Testing <code><nowiki>[opt]</nowiki></code>.
                :<b>Parameters</b>:&#32;
                :*<code>one</code> First parameter.
                :*<code>two</code> Second parameter.&#32;(optional)
                :*<code>three</code> Third parameter.
                :*<code>[[#pdf-varargs|...]]</code> Other parameters after/including fourth parameter.&#32;(optional)
                ;<code id="multiple.mul9">multiple.mul9()</code>&#32;([[#pdf-function|function]])
                :Third useless function. Can always put comments inline, may be multiple.
                ;<code id="multiple.mul10">multiple.mul10(<span style="opacity: 0.65;">three</span>)</code>&#32;([[#pdf-function|function]])
                :Function with single optional argument.
                :<b>Parameter</b>:&#32;<code>three</code> Third parameter. Limitations:
                :* This parameter must be greater than two.
                :* This parameter must be less than four.
                :* Valve cannot count to this number.
                :&#32;(optional)
                === Other items ===
                ;<code id="person2">person2</code>&#32;([[#pdf-table|table]])
                :Implicit table can always use <code><nowiki>:</nowiki></code> notation.
                :<b>Fields</b>:&#32;
                :*<code>gender</code> Has an official ID number.&#32;([[#pdf-boolean|boolean]])
                :*<code>sex</code> One of <code><nowiki>'M'</nowiki></code> (male), <code><nowiki>'F'</nowiki></code> (female) or 'N' (N/A).&#32;([[#pdf-boolean|boolean]])
                :*<code>spouse</code> Has a wife or husband.&#32;([[#pdf-boolean|boolean]])
                ;<code id="person3">person3</code>&#32;([[#pdf-table|table]])
                :Explicit table in <code><nowiki>:</nowiki></code> format.
                :<b>Fields</b>:&#32;
                :*<code>surname</code> Person's surname.&#32;([[#pdf-string|string]])
                :*<code>birthdate</code> Person's birthdate.&#32;([[#pdf-string|string]])
                :*<code>options</code> List of options for person - <code>[[#person2|person2]]</code>.&#32;([[#pdf-table|table]])
                ;<code id="person4">person4</code>&#32;([[#pdf-table|table]])
                :An implicit table.
                :<b>Fields</b>:&#32;
                :*<code>name</code> Name of person.&#32;([[#pdf-string|string]])
                :*<code>age</code> Age of person.&#32;([[#pdf-number|number]])
                ;<code id="person4">person4</code>&#32;([[#pdf-table|table]])
                :An explicit table. Can use tparam aliases in table definitions.
                :<b>Fields</b>:&#32;
                :*<code>name</code>&#32;([[#pdf-string|string]])
                :*<code>age</code>&#32;([[#pdf-number|number]])
                <nowiki />
                ]=]
            },
            -- `options.preface`
            {
                unindent [[
                Entrypoint|code = 1|preface = 
                == Usage ==
                The Scribunto module can now be used with the following syntax:
                 {{t|string|function|one|two|...}}
                ]],
                unindent [=[
                == Usage ==
                The Scribunto module can now be used with the following syntax:
                 {{t|string|function|one|two|...}}
                
                == Documentation ==
                === Package function ===
                ;<code id="entrypoint">entrypoint(package)</code>&#32;([[#pdf-function|function]])
                :Entrypoint templating wrapper for Scribunto packages. The module generates an entrypoint function that can execute Scribunto package calls in the template context. This allows a package to support both direct and template invocations. 
                :<b>Parameter</b>:&#32;<code>package</code> Scribunto package.&#32;([[#pdf-table|table]])
                :<b>Errors</b>:&#32;
                ::'you must specify a function to call'&#32;([[#pdf-string|string]];&#32;line 85)
                ::'the function you specified did not exist'&#32;([[#pdf-string|string]];&#32;line 91)
                ::'$2 is not a function'&#32;([[#pdf-string|string]];&#32;line 95;&#32;optional)
                :<b>Returns</b>:&#32;Template entrypoint - <code>[[#main|main]]</code>.&#32;([[#pdf-function|function]])
                === Other items ===
                ;<code id="main">main(frame)</code>&#32;([[#pdf-function|function]])
                :Template entrypoint function generated by this module.
                :<b>Parameter</b>:&#32;<code>frame</code> Scribunto frame in module context.&#32;([[Lua reference manual/Scribunto libraries#Frame object|Frame]])
                :<b>Returns</b>:&#32;Module output in template context.&#32;([[#pdf-string|string]])
                
                === Notes ===
                * Parent frames are not available in Entrypoint's <code><nowiki>frame</nowiki></code>. This is because recursive (grandparent) frame access is impossible in legacy Scribunto due to [[mw:Manual:Parser#Empty-argument expansion cache|empty-argument expansion cache]] limitations.
                * As Entrypoint enables template access rather than a new extension hook, it does not work with named numeric parameters such as <code><nowiki>1=</nowiki></code> or <code><nowiki>2=</nowiki></code>. This may result in unexpected behaviour such as Entrypoint and module errors.
                <nowiki />
                ]=]
            },
            -- `options.simple`
            {
                'Loxygen|code = 1|simple = 1',
                unindent [=[
                === Package items ===
                ;<code id="loxygen.main">loxygen.main(f)</code>&#32;([[#pdf-function|function]])
                :Template entrypoint for [[Template:Loxygen]].
                ;<code id="loxygen.build">loxygen.build(<span style="opacity: 0.65;">modname</span><span style="opacity: 0.65;">, options</span>)</code>&#32;([[#pdf-function|function]])
                :Scribunto documentation generator entrypoint.
                ;<code id="loxygen.taglet">loxygen.taglet(<span style="opacity: 0.65;">modname</span><span style="opacity: 0.65;">, options</span>)</code>&#32;([[#pdf-function|function]])
                :Loxygen taglet parser for Scribunto modules.
                ;<code id="loxygen.doclet">loxygen.doclet(data<span style="opacity: 0.65;">, options</span>)</code>&#32;([[#pdf-function|function]])
                :Doclet renderer for Loxygen taglet data.
                ;<code id="loxygen.tags">loxygen.tags</code>&#32;([[#pdf-table|table]])
                :Token dictionary for Loxygen tags. Maps Loxygen tag names to tag tokens.
                :* Multi-line tags use the <code><nowiki>'M'</nowiki></code> token.
                :* Multi-line preformatted tags use the <code><nowiki>'ML'</nowiki></code> token.
                :* Identifier tags use the <code><nowiki>'ID'</nowiki></code> token.
                :* Single-line tags use the <code><nowiki>'S'</nowiki></code> token.
                :* Flags use the <code><nowiki>'N'</nowiki></code> token.
                :* Type tags use the <code><nowiki>'T'</nowiki></code> token.
                <nowiki />
                ]=]
            },
            -- default title
            {
                'code = 1|simple = 1',
                unindent [=[
                === Package items ===
                ;<code id="loxygen.main">loxygen.main(f)</code>&#32;([[#pdf-function|function]])
                :Template entrypoint for [[Template:Loxygen]].
                ;<code id="loxygen.build">loxygen.build(<span style="opacity: 0.65;">modname</span><span style="opacity: 0.65;">, options</span>)</code>&#32;([[#pdf-function|function]])
                :Scribunto documentation generator entrypoint.
                ;<code id="loxygen.taglet">loxygen.taglet(<span style="opacity: 0.65;">modname</span><span style="opacity: 0.65;">, options</span>)</code>&#32;([[#pdf-function|function]])
                :Loxygen taglet parser for Scribunto modules.
                ;<code id="loxygen.doclet">loxygen.doclet(data<span style="opacity: 0.65;">, options</span>)</code>&#32;([[#pdf-function|function]])
                :Doclet renderer for Loxygen taglet data.
                ;<code id="loxygen.tags">loxygen.tags</code>&#32;([[#pdf-table|table]])
                :Token dictionary for Loxygen tags. Maps Loxygen tag names to tag tokens.
                :* Multi-line tags use the <code><nowiki>'M'</nowiki></code> token.
                :* Multi-line preformatted tags use the <code><nowiki>'ML'</nowiki></code> token.
                :* Identifier tags use the <code><nowiki>'ID'</nowiki></code> token.
                :* Single-line tags use the <code><nowiki>'S'</nowiki></code> token.
                :* Flags use the <code><nowiki>'N'</nowiki></code> token.
                :* Type tags use the <code><nowiki>'T'</nowiki></code> token.
                <nowiki />
                ]=]
            },
            -- `options.noluaref`
            {
                'Loxygen|code = 1|simple = 1|noluaref = 1',
                unindent [=[
                === Package items ===
                ;<code id="loxygen.main">loxygen.main(f)</code>&#32;(function)
                :Template entrypoint for [[Template:Loxygen]].
                ;<code id="loxygen.build">loxygen.build(<span style="opacity: 0.65;">modname</span><span style="opacity: 0.65;">, options</span>)</code>&#32;(function)
                :Scribunto documentation generator entrypoint.
                ;<code id="loxygen.taglet">loxygen.taglet(<span style="opacity: 0.65;">modname</span><span style="opacity: 0.65;">, options</span>)</code>&#32;(function)
                :Loxygen taglet parser for Scribunto modules.
                ;<code id="loxygen.doclet">loxygen.doclet(data<span style="opacity: 0.65;">, options</span>)</code>&#32;(function)
                :Doclet renderer for Loxygen taglet data.
                ;<code id="loxygen.tags">loxygen.tags</code>&#32;(table)
                :Token dictionary for Loxygen tags. Maps Loxygen tag names to tag tokens.
                :* Multi-line tags use the <code><nowiki>'M'</nowiki></code> token.
                :* Multi-line preformatted tags use the <code><nowiki>'ML'</nowiki></code> token.
                :* Identifier tags use the <code><nowiki>'ID'</nowiki></code> token.
                :* Single-line tags use the <code><nowiki>'S'</nowiki></code> token.
                :* Flags use the <code><nowiki>'N'</nowiki></code> token.
                :* Type tags use the <code><nowiki>'T'</nowiki></code> token.
                <nowiki />
                ]=]
            },
            -- `options.plain`
            {
                'Loxygen|code = 1|simple = 1|plain = 1',
                unindent [=[
                === Package items ===
                ;<code id="loxygen.main">loxygen.main(f)</code>&#32;([[#pdf-function|function]])
                :Template entrypoint for [[Template:Loxygen]].
                ;<code id="loxygen.build">loxygen.build(<span style="opacity: 0.65;">modname</span><span style="opacity: 0.65;">, options</span>)</code>&#32;([[#pdf-function|function]])
                :Scribunto documentation generator entrypoint.
                ;<code id="loxygen.taglet">loxygen.taglet(<span style="opacity: 0.65;">modname</span><span style="opacity: 0.65;">, options</span>)</code>&#32;([[#pdf-function|function]])
                :Loxygen taglet parser for Scribunto modules.
                ;<code id="loxygen.doclet">loxygen.doclet(data<span style="opacity: 0.65;">, options</span>)</code>&#32;([[#pdf-function|function]])
                :Doclet renderer for Loxygen taglet data.
                ;<code id="loxygen.tags">loxygen.tags</code>&#32;([[#pdf-table|table]])
                :Token dictionary for Loxygen tags. Maps Loxygen tag names to tag tokens.
                :* Multi-line tags use the `'M'` token.
                :* Multi-line preformatted tags use the `'ML'` token.
                :* Identifier tags use the `'ID'` token.
                :* Single-line tags use the `'S'` token.
                :* Flags use the `'N'` token.
                :* Type tags use the `'T'` token.
                <nowiki />
                ]=]
            },
            -- `options.strip`
            {
                'Loxygen|code = 1|simple = 1|strip = 1',
                unindent [=[
                === Package items ===
                ;<code id="loxygen.main">main(f)</code>&#32;([[#pdf-function|function]])
                :Template entrypoint for [[Template:Loxygen]].
                ;<code id="loxygen.build">build(<span style="opacity: 0.65;">modname</span><span style="opacity: 0.65;">, options</span>)</code>&#32;([[#pdf-function|function]])
                :Scribunto documentation generator entrypoint.
                ;<code id="loxygen.taglet">taglet(<span style="opacity: 0.65;">modname</span><span style="opacity: 0.65;">, options</span>)</code>&#32;([[#pdf-function|function]])
                :Loxygen taglet parser for Scribunto modules.
                ;<code id="loxygen.doclet">doclet(data<span style="opacity: 0.65;">, options</span>)</code>&#32;([[#pdf-function|function]])
                :Doclet renderer for Loxygen taglet data.
                ;<code id="loxygen.tags">tags</code>&#32;([[#pdf-table|table]])
                :Token dictionary for Loxygen tags. Maps Loxygen tag names to tag tokens.
                :* Multi-line tags use the <code><nowiki>'M'</nowiki></code> token.
                :* Multi-line preformatted tags use the <code><nowiki>'ML'</nowiki></code> token.
                :* Identifier tags use the <code><nowiki>'ID'</nowiki></code> token.
                :* Single-line tags use the <code><nowiki>'S'</nowiki></code> token.
                :* Flags use the <code><nowiki>'N'</nowiki></code> token.
                :* Type tags use the <code><nowiki>'T'</nowiki></code> token.
                <nowiki />
                ]=]
            }
        }
    }
}